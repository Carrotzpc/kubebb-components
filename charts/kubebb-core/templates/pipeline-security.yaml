{{- if and (.Values.deployment.rating_enable) (.Capabilities.APIVersions.Has "tekton.dev/v1beta1" ) }}
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: rating-security-rback
  annotations:
    rating.core.kubebb.k8s.com.cn/type: security
    rating.core.kubebb.k8s.com.cn/weight: "1"
  namespace: {{ .Release.Namespace }}
spec:
  params:
  - name: url
    type: string
  - name: component
    type: string
  - name: version
    type: string
  - name: repository
    type: string
  results:
  - name: RBACCM
    type: string
  steps:
    - name: rback
      image: kubebb/rating:v0.1.3
      script: |
        #!/usr/bin/env sh
        # Download and untar chart package
        helm pull --untar $(params.url)

        cat <<EOF | jq --argjson json "$(helm template $(params.component)|yq -o=json|jq --slurp)" '.items |= $json' | rback > r.dot
        {"kind": "List","apiVersion": "v1","metadata": {},"items": []}
        EOF
        
        # Path to ServiceAccount token
        SERVICEACCOUNT=/var/run/secrets/kubernetes.io/serviceaccount
        # Read this Pod's namespace
        NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
        NAME=$(params.repository)"."$(params.component)"."$(params.version)
        helm template $(params.component) |yq 'select(.kind=="ServiceAccount" or .kind=="ClusterRoleBinding" or .kind=="ClusterRole" or .kind=="Role" or .kind=="RoleBinding")' > rbac.yaml
        cat <<EOF |jq --arg dot "$(cat r.dot |base64)" '.binaryData.r = $dot' \
                  | jq --arg rbac "$(cat rbac.yaml |base64)" '.binaryData.rbac = $rbac' \
                  | jq --arg name "$NAME" '.metadata.name = $name' \
                  | jq --arg namespace "$NAMESPACE" '.metadata.namespace = $namespace' \
                  | kubectl apply -f -
        {"kind": "ConfigMap","apiVersion": "v1","metadata": {"name": "configmap","namespace": "default"},"binaryData": {"r": "","rbac": ""}}
        EOF
        echo ${NAME} | tee $(results.RBACCM.path)
---
apiVersion: tekton.dev/v1beta1
kind: Pipeline
metadata:
  name:  rating-security-pipeline
  annotations:
    tekton.dev/tags: {{ .Release.Name }}-security
    tekton.dev/displayName: "{{ .Release.Name }}"
    tekton.dev/platforms: "linux/amd64"
    core.kubebb.k8s.com.cn/dimension: security
  namespace: {{ .Release.Namespace }}
spec:
  description: >-
    kubebb-core default pipeline
  params:
    - name: COMPONENT_NAME
      description: >-
        component name
      type: string
    - name: REPOSITORY_NAME
      description: repository name
      default: "kubebb"
      type: string
    - name: VERSION
      description: component version
      type: string
    - name: URL
      description: the full URL of the component tgz file.
      type: string
  results:
  - name: RBACCM
    value: $(tasks.rating-security-rback.results.RBACCM)
  tasks:
    - name: rating-security-rback
      retries: 2
      taskRef:
        resolver: cluster
        params:
        - name: kind
          value: task
        - name: name
          value: rating-security-rback
        - name: namespace
          value: {{ .Release.Namespace }}
      params:
        - name: url
          value: $(params.URL)
        - name: component
          value: $(params.COMPONENT_NAME)
        - name: version
          value: $(params.VERSION)
        - name: repository
          value: $(params.REPOSITORY_NAME)
{{- end }}
